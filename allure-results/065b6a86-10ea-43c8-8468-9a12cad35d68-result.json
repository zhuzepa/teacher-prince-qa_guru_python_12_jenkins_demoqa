{"name": "Успешное заполнение формы регистарции", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '#uploadPicture')).send keys\n\nReason: InvalidArgumentException: Message: invalid argument: File not found : C:\\Users\\ChirkinAA\\PycharmProjects\\teacher-prince-qa_guru_python_12_jenkins_demoqa\\resource\\russia.png\n  (Session info: chrome=100.0.4896.60)\nStacktrace:\n#0 0x56189f51f013 <unknown>\n#1 0x56189f281a08 <unknown>\n#2 0x56189f2b0dd6 <unknown>\n#3 0x56189f2d5932 <unknown>\n#4 0x56189f2ac6d3 <unknown>\n#5 0x56189f2d5a3e <unknown>\n#6 0x56189f2e8b94 <unknown>\n#7 0x56189f2d5823 <unknown>\n#8 0x56189f2ab08a <unknown>\n#9 0x56189f2ac1e5 <unknown>\n#10 0x56189f54ce5d <unknown>\n#11 0x56189f566061 <unknown>\n#12 0x56189f54ebb5 <unknown>\n#13 0x56189f566e08 <unknown>\n#14 0x56189f5422f0 <unknown>\n#15 0x56189f582988 <unknown>\n#16 0x56189f582b08 <unknown>\n#17 0x56189f59c5dd <unknown>\n#18 0x7fb273c16609 <unknown>\n\nScreenshot: file://C:\\Users\\ChirkinAA\\.selene\\screenshots\\1694114331662\\1694114331662.png\nPageSource: file://C:\\Users\\ChirkinAA\\.selene\\screenshots\\1694114331662\\1694114331662.html", "trace": "fn = <selene.core.wait.Command object at 0x0000026B3F69BE50>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\nvenv\\lib\\site-packages\\selene\\core\\wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\lib\\site-packages\\selene\\core\\wait.py:61: in __call__\n    return self._fn(entity)\nvenv\\lib\\site-packages\\selene\\core\\entity.py:473: in <lambda>\n    self.wait.command('send keys', lambda element: element().send_keys(*value))\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:223: in send_keys\n    self._execute(Command.SEND_KEYS_TO_ELEMENT,\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:396: in _execute\n    return self._parent.execute(command, params)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000026B3F69AFE0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: File not found : C:\\\\\\\\Use...\\\\n#16 0x56189f582b08 \\\\u003Cunknown>\\\\n#17 0x56189f59c5dd \\\\u003Cunknown>\\\\n#18 0x7fb273c16609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : C:\\Users\\ChirkinAA\\PycharmProjects\\teacher-prince-qa_guru_python_12_jenkins_demoqa\\resource\\russia.png\nE         (Session info: chrome=100.0.4896.60)\nE       Stacktrace:\nE       #0 0x56189f51f013 <unknown>\nE       #1 0x56189f281a08 <unknown>\nE       #2 0x56189f2b0dd6 <unknown>\nE       #3 0x56189f2d5932 <unknown>\nE       #4 0x56189f2ac6d3 <unknown>\nE       #5 0x56189f2d5a3e <unknown>\nE       #6 0x56189f2e8b94 <unknown>\nE       #7 0x56189f2d5823 <unknown>\nE       #8 0x56189f2ab08a <unknown>\nE       #9 0x56189f2ac1e5 <unknown>\nE       #10 0x56189f54ce5d <unknown>\nE       #11 0x56189f566061 <unknown>\nE       #12 0x56189f54ebb5 <unknown>\nE       #13 0x56189f566e08 <unknown>\nE       #14 0x56189f5422f0 <unknown>\nE       #15 0x56189f582988 <unknown>\nE       #16 0x56189f582b08 <unknown>\nE       #17 0x56189f59c5dd <unknown>\nE       #18 0x7fb273c16609 <unknown>\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: InvalidArgumentException\n\nDuring handling of the above exception, another exception occurred:\n\nsetup_browser = None\n\n    @allure.title('Успешное заполнение формы регистарции')\n    def test_demoqa(setup_browser):\n        browser.open('/automation-practice-form')\n    \n        browser.element('#firstName').type('Ezekiel')\n        browser.element('#lastName').type('Romaguera')\n        browser.element('#userEmail').type('fakedata72553@gmail.com')\n    \n        browser.element('label[for=\"gender-radio-1\"]').click()\n        browser.element('#userNumber').type('1234567890')\n        browser.element('#dateOfBirthInput').click()\n        browser.element('.react-datepicker__year-select').click()\n        browser.element('.react-datepicker__year-select>option[value=\"1905\"]').perform(\n            command.js.scroll_into_view\n        ).click()\n        browser.element('.react-datepicker__month-select>option[value=\"11\"]').perform(\n            command.js.scroll_into_view\n        ).click()\n    \n        browser.element('.react-datepicker__day--014').perform(command.js.click)\n        browser.element('#subjectsInput').type('English').press_enter()\n        browser.element('#subjectsInput').type('Arts').press_enter()\n        browser.element('label[for=hobbies-checkbox-1]').perform(command.js.click)\n        browser.element('label[for=hobbies-checkbox-2]').perform(command.js.click)\n        browser.element('label[for=hobbies-checkbox-3]').perform(command.js.click)\n    \n>       browser.element('#uploadPicture').send_keys(os.path.abspath('resource/russia.png'))\n\ntests\\demoqa1\\test_registration_form.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\lib\\site-packages\\selene\\core\\entity.py:473: in send_keys\n    self.wait.command('send keys', lambda element: element().send_keys(*value))\nvenv\\lib\\site-packages\\selene\\core\\wait.py:154: in command\n    self.for_(Command(description, fn))\nvenv\\lib\\site-packages\\selene\\core\\wait.py:143: in for_\n    return self._decorator(self)(logic)(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfn = <selene.core.wait.Command object at 0x0000026B3F69BE50>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_message = str(reason)\n    \n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=reason_message,\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 4s, while waiting for:\nE                   browser.element(('css selector', '#uploadPicture')).send keys\nE                   \nE                   Reason: InvalidArgumentException: Message: invalid argument: File not found : C:\\Users\\ChirkinAA\\PycharmProjects\\teacher-prince-qa_guru_python_12_jenkins_demoqa\\resource\\russia.png\nE                     (Session info: chrome=100.0.4896.60)\nE                   Stacktrace:\nE                   #0 0x56189f51f013 <unknown>\nE                   #1 0x56189f281a08 <unknown>\nE                   #2 0x56189f2b0dd6 <unknown>\nE                   #3 0x56189f2d5932 <unknown>\nE                   #4 0x56189f2ac6d3 <unknown>\nE                   #5 0x56189f2d5a3e <unknown>\nE                   #6 0x56189f2e8b94 <unknown>\nE                   #7 0x56189f2d5823 <unknown>\nE                   #8 0x56189f2ab08a <unknown>\nE                   #9 0x56189f2ac1e5 <unknown>\nE                   #10 0x56189f54ce5d <unknown>\nE                   #11 0x56189f566061 <unknown>\nE                   #12 0x56189f54ebb5 <unknown>\nE                   #13 0x56189f566e08 <unknown>\nE                   #14 0x56189f5422f0 <unknown>\nE                   #15 0x56189f582988 <unknown>\nE                   #16 0x56189f582b08 <unknown>\nE                   #17 0x56189f59c5dd <unknown>\nE                   #18 0x7fb273c16609 <unknown>\nE                   \nE                   Screenshot: file://C:\\Users\\ChirkinAA\\.selene\\screenshots\\1694114331662\\1694114331662.png\nE                   PageSource: file://C:\\Users\\ChirkinAA\\.selene\\screenshots\\1694114331662\\1694114331662.html\n\nvenv\\lib\\site-packages\\selene\\core\\wait.py:141: TimeoutException"}, "start": 1694114338122, "stop": 1694114348920, "uuid": "d91911e8-995b-472a-ba23-d21836a39ff1", "historyId": "e7a6feb92bc9b69ab2c9650e09e7fc01", "testCaseId": "e7a6feb92bc9b69ab2c9650e09e7fc01", "fullName": "tests.demoqa1.test_registration_form#test_demoqa", "labels": [{"name": "parentSuite", "value": "tests.demoqa1"}, {"name": "suite", "value": "test_registration_form"}, {"name": "host", "value": "CHIRKINAA-E15G2"}, {"name": "thread", "value": "41768-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.demoqa1.test_registration_form"}]}